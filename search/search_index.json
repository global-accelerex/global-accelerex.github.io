{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Accelerex POS We support a variety of smart POS terminals","title":"Home"},{"location":"#welcome-to-accelerex-pos","text":"We support a variety of smart POS terminals","title":"Welcome to Accelerex POS"},{"location":"androidpos/","text":"API DOCUMENT This document outlines the consumer facing endpoints for integrating payment and print functions. The operations are triggered via Android Intents. Sample code to trigger intents can be found at the bottom of this document. Additionally, all code samples are in Kotlin. Responses are received on the Intent object. The three String Extra keys are status , statusMessage and data . Every successful operation ( Activity.RESULT_OK ) returns a status containing a valid Response Code as detailed in the RESPONSE CODES section. N.B : For response code 03, 04, 05 and 06 the data field is empty. statusMessage always contains success or failure message of the operation. N.B : The android terminals do not yet support Google Play Services. However, you'll still be able to use Firebase Crashyltics. RESPONSE CODES Code Message Decription 00 SUCCESS Message sent to host and transaction has been approved. 02 FAILED Message sent to host but transaction has been declined. 03 CANCEL User canceled transaction, Signal lost from host, or an invalid transaction was aborted by the payment application. 04 INVALID FORMAT Invalid data format of message sent to payment application. 05 WRONG PARAMETER Invalid parameter(S) passed as part of the data sent to payment application. 06 TIMEOUT PIN entry timeout or card read timeout. INTENT SETTINGS(Nexgo terminals) The current intent filter for an android app than want to be launched using the PAY button on the Nexgo terminal home screen. <intent-filter> <action android:name= \"android.intent.action.MAIN\" /> <category android:name= \"android.intent.category.LAUNCHER\" /> </intent-filter> To enable your application being launched by the PAY button\ufd3ehome.png\ufd3f, replace above intent filter with below. <intent-filter> <action android:name= \"android.intent.action.PAY_APP\" /> <category android:name= \"android.intent.category.DEFAULT\" /> </intent-filter> OPERATIONS KEY EXCHANGE (Optional) Intent Name = com.globalaccelerex.keyexchange This intent is used to do a key exchange without requiring a password. A successful key exchange will return Activity.RESULT_OK and a status of 00 . A failed key exchange will return Activity.RESULT_OK and a status of 02 . Sample Key Exchange Intent Request fun doKeyExchange () { startActivityForResult ( KEY_EXCHANGE_INTENT , KEY_EXCHANGE_REQUEST ) } GET PARAMETERS Intent Name = com.globalaccelerex.utility When status is 00 , the response is provided in the String Extra Field data on the Intent object. A failed operattion will return Activity.RESULT_OK and a status of 02 . It's recommended to parse this JSON data as a TreeMap. A TreeMap allows for case insensitivity on keys val treeMap = TreeMap < String , String > ( String . CASE_INSENSITIVE_ORDER ) Sample Get Parameters Intent Request fun doGetParameters () { val jsonString = \"{ \\\"action\\\":\\\"PARAMETER\\\" }\" val intent = Intent ( PARAMETER_INTENT ) intent . putExtra ( \"requestData\" , jsonString ) startActivityForResult ( intent , PARAMETER_REQUEST ) } Get Parameters Sample Response Data { \"Biller_ID\" : \"GA000000001\" , \"MerchantID\" : \"3169MB126086441\" , \"TerminalID\" : \"3181BM43\" , \"serialNumber\" : \"GA123400\" , \"PTSP\" : \"Global Accelerex\" , \"FooterMessage\" : \"THANKS FOR COMING\" , \"MerchantName\" : \"Accelerex Inc.\" , \"MerchantAddress\" : \"Ilupeju, Lagos, Nigeria\" , \"BankName\" : \"RANDOM BANK\" , \"BankLogo\" : \"https://aws.com/bank_logo.png\" , \"MerchantCategoryCode\" : \"6010\" , \"baseAppVersion\" : \"Rex MOCK-POS 1.0.0-230720\" , \"currency\" : \"NGN\" } TRANSACTION Intent Name = com.globalaccelerex.transaction This request requires some extra data(Request Data). The data is passed in the form of a Stringified JSON object. And is passed as a String Extra on the field requestData on the Intent object. When status is 00 or 02 , the response is provided in the String Extra Field data on the Intent object. There are three transaction sets supported. For Balance, a value of 0.00 Naira should be sent. No debit occurs on the card inserted Transaction Types Key Description PURCHASE Normal purchase transaction PURCHASEWITHCB Purchase transaction with cashback BALANCE Check card balance PREAUTH Pre-authorization transaction PREAUTHCOMPLETE Pre-authorization completion transaction REFUND Refund transaction CASHADVANCE Cash advance transaction REVERSAL Reversal transaction for an unsettled transaction #### Transaction Request Data Name Type Description transType String Transaction Type amount String Transaction amount to two decimal places print String Determine if receipt should be printed. (\"true\" or \"false\") cashBackAmount String Cash back amount for a PURCHASEWITHCB transaction type. It MUST be provided for PURCHASEWITHCB transaction type rrn String Transaction retrieval reference number of a previous transaction. MUST be provided for PREAUTHCOMPLETE and REVERSAL transaction types transactionReference String Custom transaction reference used for transaction reconciliation with the processor. This data is converted to a JSON object and then stringified. Sample Request Data { \"transType\" : \"PURCHASE\" , \"amount\" : \"2.00\" , \"print\" : \"true\" , \"transactionReference\" : \"1234567890ABCDEFJ\" } { \"transType\" : \"PURCHASEWITHCB\" , \"amount\" : \"2.00\" , \"print\" : \"true\" , \"cashBackAmount\" : \"1.00\" , \"transactionReference\" : \"1234567890ABCDEFJ\" } N.B amount for PURCHASEWITHCB is equivalent to sales amount cashBackAmount is cashback amount, so total value of transaction = amount + cashBackAmount . { \"transType\" : \"REVERSAL\" , \"amount\" : \"2.00\" , \"print\" : \"true\" , \"rrn\" : \"201902271155\" , \"transactionReference\" : \"1234567890ABCDEFJ\" } Transaction Response Data This endpoint returns a Stringified JSON object in the data key. { \"aid\" : \"A0000000031010\" , \"amount\" : \"2.0\" , \"cashBackAmount\" : \"1.00\" , \"appLabel\" : \"VISA\" , \"authcode\" : \"806424\" , \"cardExpireDate\" : \"08/19\" , \"cardHolderName\" : \"A/OLORUNTOBILOLA\" , \"datetime\" : \"2019-02-27 11:52:59\" , \"maskedPan\" : \"496009******3329\" , \"message\" : \"Approved successfully\" , \"nuban\" : \"0054365768\" , \"pinType\" : \"Pin Verified\" , \"rrn\" : \"201902271155\" , \"stan\" : \"199535\" , \"statuscode\" : \"00\" , \"terminalID\" : \"3181BM43\" , \"transactionType\" : \"PURCHASEWITHCB\" , \"merchantName\" : \"Accelerex Inc.\" , \"merchantId\" : \"3169MB126086441\" , \"merchantAddress\" : \"Ilupeju, Lagos, Nigeria\" , \"merchantCategoryCode\" : \"6010\" , \"bankName\" : \"RANDOM BANK\" , \"bankLogo\" : \"https://aws.com/bank_logo.png\" , \"ptsp\" : \"Global Accelerex\" , \"ptspContact\" : \"0700ACCELEREX\" , \"footerMessage\" : \"Thanks for using our POS\" , \"deviceSerialNumber\" : \"GA123400\" , \"baseAppVersion\" : \"Rex MOCK-POS 1.0.0-230720\" , \"currency\" : \"NGN\" } The fields nuban and authcode are nullable fields. amount is sale amount. Not all Issuers return nuban for transactions. Some failed transactions don't have an Auth Code. Sample Transaction Intent Request fun doCardTransaction ( amount : String ) { val jsonString = \"{ \\\"transType\\\": \\\"PURCHASE\\\", \\\"amount\\\":\\\" $ amount \\\", \\\"print\\\":\\\"false\\\" }\" val intent = Intent ( PURCHASE_INTENT ) intent . putExtra ( \"requestData\" , jsonString ) startActivityForResult ( intent , PURCHASE_REQUEST ) } TRANSACTION HISTORY Intent Name = com.globalaccelerex.reprint This intent launches the transaction history screen where you can view all transactions carried out on the terminal. The screen requires a password from the user. PRINTING Intent Name = com.globalaccelerex.printer This request requires some extra data(Request Data). The data is passed the form of a Stringified JSON object. And is passed as a String Extra on the field jsonData on the Intent object. The Print data class provided makes use of Moshi to annotate the fields. Sample Print Json Object { \"Receipt\" : [{ \"Bitmap\" : \"filename\" , \"letterSpacing\" : 5 , \"String\" : [{ \"isMultiline\" : true , \"header\" : { \"text\" : \"Merchant Name\" , \"align\" : \"centre\" , \"size\" : \"large\" , \"isBold\" : true }, \"body\" : { \"text\" : \"Global Accelerex\" , \"alignment\" : \"centre\" , \"size\" : \"normal\" , \"isBold\" : false } }, { \"isMultiline\" : false , \"header\" : { \"text\" : \"Reference Number\" , \"align\" : \"left\" , \"size\" : \"large\" , \"isBold\" : true }, \"body\" : { \"text\" : \"123456789\" } } ] }, { \"Bitmap\" : \"filename\" , \"letterSpacing\" : 5 , \"String\" : [{ \"isMultiline\" : true , \"header\" : { \"text\" : \"Merchant Name\" , \"align\" : \"centre\" , \"size\" : \"large\" , \"isBold\" : true }, \"body\" : { \"text\" : \"Allen Tobi\" , \"alignment\" : \"centre\" , \"size\" : \"normal\" , \"isBold\" : false } }, { \"isMultiline\" : false , \"header\" : { \"text\" : \"Reference Number\" , \"align\" : \"left\" , \"size\" : \"large\" , \"isBold\" : true }, \"body\" : { \"text\" : \"abcd1234\" } } ] } ] } Sample Print Kotlin Object data class PrintObject ( @Json ( name = \"Receipt\" ) val printFields : List < PrintField > ) data class PrintField ( @Json ( name = \"Bitmap\" ) val filename : String , @Json ( name = \"letterSpacing\" ) val letterSpacing : Int , @Json ( name = \"String\" ) val stringFields : List < StringField > ) data class StringField ( @Json ( name = \"isMultiline\" ) val isMultiline : Boolean , @Json ( name = \"header\" ) val header : TextField , @Json ( name = \"body\" ) val body : TextField ) data class TextField ( @Json ( name = \"text\" ) val text : String , @Json ( name = \"align\" ) val align : String? , @Json ( name = \"size\" ) val size : String? , @Json ( name = \"isBold\" ) val isBold : Boolean? ) Sample Print Intent Request fun print ( jsonString : String ) { val intent = Intent ( PRINTER_INTENT ) intent . putExtra ( \"jsonData\" , jsonString ) startActivityForResult ( intent , PRINT_REQUEST ) } Field Description Name Type Description Values isMultiline Boolean Determine if header and body are printed on different lines true/false isBold Boolean Determine if to bolden TextField true/false align String Set alignment center, left, right size String Set text size small, normal, large Bitmap String Path to image file saved on disk Notes on Printing When the object TextField has an empty text field for both header and body the StringField is discarded. If an empty space is needed to save as a line break, specify a text field containing at least a space for the TextField header . When isMultiline is set to false on a StringField object, the fields align and isBold are ignored for the TextField body . If you need to print a single line. Set isMultiline to true and set the text field on the body TextField to an empty string. SETTINGS Intent Name = com.globalaccelerex.settings This page allows you open a Settings GUI to allow a user carry out Key Exchange and Printing Parameters Sample Settings Intent Request fun launchSettings () { startActivityForResult ( Intent ( SETTINGS_INTENT ), SETTINGS_REQUEST ) }","title":"API DOCUMENT"},{"location":"androidpos/#api-document","text":"This document outlines the consumer facing endpoints for integrating payment and print functions. The operations are triggered via Android Intents. Sample code to trigger intents can be found at the bottom of this document. Additionally, all code samples are in Kotlin. Responses are received on the Intent object. The three String Extra keys are status , statusMessage and data . Every successful operation ( Activity.RESULT_OK ) returns a status containing a valid Response Code as detailed in the RESPONSE CODES section. N.B : For response code 03, 04, 05 and 06 the data field is empty. statusMessage always contains success or failure message of the operation. N.B : The android terminals do not yet support Google Play Services. However, you'll still be able to use Firebase Crashyltics.","title":"API DOCUMENT"},{"location":"androidpos/#response-codes","text":"Code Message Decription 00 SUCCESS Message sent to host and transaction has been approved. 02 FAILED Message sent to host but transaction has been declined. 03 CANCEL User canceled transaction, Signal lost from host, or an invalid transaction was aborted by the payment application. 04 INVALID FORMAT Invalid data format of message sent to payment application. 05 WRONG PARAMETER Invalid parameter(S) passed as part of the data sent to payment application. 06 TIMEOUT PIN entry timeout or card read timeout.","title":"RESPONSE CODES"},{"location":"androidpos/#intent-settingsnexgo-terminals","text":"The current intent filter for an android app than want to be launched using the PAY button on the Nexgo terminal home screen. <intent-filter> <action android:name= \"android.intent.action.MAIN\" /> <category android:name= \"android.intent.category.LAUNCHER\" /> </intent-filter> To enable your application being launched by the PAY button\ufd3ehome.png\ufd3f, replace above intent filter with below. <intent-filter> <action android:name= \"android.intent.action.PAY_APP\" /> <category android:name= \"android.intent.category.DEFAULT\" /> </intent-filter>","title":"INTENT SETTINGS(Nexgo terminals)"},{"location":"androidpos/#operations","text":"","title":"OPERATIONS"},{"location":"androidpos/#key-exchange-optional","text":"Intent Name = com.globalaccelerex.keyexchange This intent is used to do a key exchange without requiring a password. A successful key exchange will return Activity.RESULT_OK and a status of 00 . A failed key exchange will return Activity.RESULT_OK and a status of 02 .","title":"KEY EXCHANGE (Optional)"},{"location":"androidpos/#sample-key-exchange-intent-request","text":"fun doKeyExchange () { startActivityForResult ( KEY_EXCHANGE_INTENT , KEY_EXCHANGE_REQUEST ) }","title":"Sample Key Exchange Intent Request"},{"location":"androidpos/#get-parameters","text":"Intent Name = com.globalaccelerex.utility When status is 00 , the response is provided in the String Extra Field data on the Intent object. A failed operattion will return Activity.RESULT_OK and a status of 02 . It's recommended to parse this JSON data as a TreeMap. A TreeMap allows for case insensitivity on keys val treeMap = TreeMap < String , String > ( String . CASE_INSENSITIVE_ORDER )","title":"GET PARAMETERS"},{"location":"androidpos/#sample-get-parameters-intent-request","text":"fun doGetParameters () { val jsonString = \"{ \\\"action\\\":\\\"PARAMETER\\\" }\" val intent = Intent ( PARAMETER_INTENT ) intent . putExtra ( \"requestData\" , jsonString ) startActivityForResult ( intent , PARAMETER_REQUEST ) }","title":"Sample Get Parameters Intent Request"},{"location":"androidpos/#get-parameters-sample-response-data","text":"{ \"Biller_ID\" : \"GA000000001\" , \"MerchantID\" : \"3169MB126086441\" , \"TerminalID\" : \"3181BM43\" , \"serialNumber\" : \"GA123400\" , \"PTSP\" : \"Global Accelerex\" , \"FooterMessage\" : \"THANKS FOR COMING\" , \"MerchantName\" : \"Accelerex Inc.\" , \"MerchantAddress\" : \"Ilupeju, Lagos, Nigeria\" , \"BankName\" : \"RANDOM BANK\" , \"BankLogo\" : \"https://aws.com/bank_logo.png\" , \"MerchantCategoryCode\" : \"6010\" , \"baseAppVersion\" : \"Rex MOCK-POS 1.0.0-230720\" , \"currency\" : \"NGN\" }","title":"Get Parameters Sample Response Data"},{"location":"androidpos/#transaction","text":"Intent Name = com.globalaccelerex.transaction This request requires some extra data(Request Data). The data is passed in the form of a Stringified JSON object. And is passed as a String Extra on the field requestData on the Intent object. When status is 00 or 02 , the response is provided in the String Extra Field data on the Intent object. There are three transaction sets supported. For Balance, a value of 0.00 Naira should be sent. No debit occurs on the card inserted","title":"TRANSACTION"},{"location":"androidpos/#transaction-types","text":"Key Description PURCHASE Normal purchase transaction PURCHASEWITHCB Purchase transaction with cashback BALANCE Check card balance PREAUTH Pre-authorization transaction PREAUTHCOMPLETE Pre-authorization completion transaction REFUND Refund transaction CASHADVANCE Cash advance transaction REVERSAL Reversal transaction for an unsettled transaction #### Transaction Request Data Name Type Description transType String Transaction Type amount String Transaction amount to two decimal places print String Determine if receipt should be printed. (\"true\" or \"false\") cashBackAmount String Cash back amount for a PURCHASEWITHCB transaction type. It MUST be provided for PURCHASEWITHCB transaction type rrn String Transaction retrieval reference number of a previous transaction. MUST be provided for PREAUTHCOMPLETE and REVERSAL transaction types transactionReference String Custom transaction reference used for transaction reconciliation with the processor. This data is converted to a JSON object and then stringified.","title":"Transaction Types"},{"location":"androidpos/#sample-request-data","text":"{ \"transType\" : \"PURCHASE\" , \"amount\" : \"2.00\" , \"print\" : \"true\" , \"transactionReference\" : \"1234567890ABCDEFJ\" } { \"transType\" : \"PURCHASEWITHCB\" , \"amount\" : \"2.00\" , \"print\" : \"true\" , \"cashBackAmount\" : \"1.00\" , \"transactionReference\" : \"1234567890ABCDEFJ\" } N.B amount for PURCHASEWITHCB is equivalent to sales amount cashBackAmount is cashback amount, so total value of transaction = amount + cashBackAmount . { \"transType\" : \"REVERSAL\" , \"amount\" : \"2.00\" , \"print\" : \"true\" , \"rrn\" : \"201902271155\" , \"transactionReference\" : \"1234567890ABCDEFJ\" }","title":"Sample Request Data"},{"location":"androidpos/#transaction-response-data","text":"This endpoint returns a Stringified JSON object in the data key. { \"aid\" : \"A0000000031010\" , \"amount\" : \"2.0\" , \"cashBackAmount\" : \"1.00\" , \"appLabel\" : \"VISA\" , \"authcode\" : \"806424\" , \"cardExpireDate\" : \"08/19\" , \"cardHolderName\" : \"A/OLORUNTOBILOLA\" , \"datetime\" : \"2019-02-27 11:52:59\" , \"maskedPan\" : \"496009******3329\" , \"message\" : \"Approved successfully\" , \"nuban\" : \"0054365768\" , \"pinType\" : \"Pin Verified\" , \"rrn\" : \"201902271155\" , \"stan\" : \"199535\" , \"statuscode\" : \"00\" , \"terminalID\" : \"3181BM43\" , \"transactionType\" : \"PURCHASEWITHCB\" , \"merchantName\" : \"Accelerex Inc.\" , \"merchantId\" : \"3169MB126086441\" , \"merchantAddress\" : \"Ilupeju, Lagos, Nigeria\" , \"merchantCategoryCode\" : \"6010\" , \"bankName\" : \"RANDOM BANK\" , \"bankLogo\" : \"https://aws.com/bank_logo.png\" , \"ptsp\" : \"Global Accelerex\" , \"ptspContact\" : \"0700ACCELEREX\" , \"footerMessage\" : \"Thanks for using our POS\" , \"deviceSerialNumber\" : \"GA123400\" , \"baseAppVersion\" : \"Rex MOCK-POS 1.0.0-230720\" , \"currency\" : \"NGN\" } The fields nuban and authcode are nullable fields. amount is sale amount. Not all Issuers return nuban for transactions. Some failed transactions don't have an Auth Code.","title":"Transaction Response Data"},{"location":"androidpos/#sample-transaction-intent-request","text":"fun doCardTransaction ( amount : String ) { val jsonString = \"{ \\\"transType\\\": \\\"PURCHASE\\\", \\\"amount\\\":\\\" $ amount \\\", \\\"print\\\":\\\"false\\\" }\" val intent = Intent ( PURCHASE_INTENT ) intent . putExtra ( \"requestData\" , jsonString ) startActivityForResult ( intent , PURCHASE_REQUEST ) }","title":"Sample Transaction Intent Request"},{"location":"androidpos/#transaction-history","text":"Intent Name = com.globalaccelerex.reprint This intent launches the transaction history screen where you can view all transactions carried out on the terminal. The screen requires a password from the user.","title":"TRANSACTION HISTORY"},{"location":"androidpos/#printing","text":"Intent Name = com.globalaccelerex.printer This request requires some extra data(Request Data). The data is passed the form of a Stringified JSON object. And is passed as a String Extra on the field jsonData on the Intent object. The Print data class provided makes use of Moshi to annotate the fields.","title":"PRINTING"},{"location":"androidpos/#sample-print-json-object","text":"{ \"Receipt\" : [{ \"Bitmap\" : \"filename\" , \"letterSpacing\" : 5 , \"String\" : [{ \"isMultiline\" : true , \"header\" : { \"text\" : \"Merchant Name\" , \"align\" : \"centre\" , \"size\" : \"large\" , \"isBold\" : true }, \"body\" : { \"text\" : \"Global Accelerex\" , \"alignment\" : \"centre\" , \"size\" : \"normal\" , \"isBold\" : false } }, { \"isMultiline\" : false , \"header\" : { \"text\" : \"Reference Number\" , \"align\" : \"left\" , \"size\" : \"large\" , \"isBold\" : true }, \"body\" : { \"text\" : \"123456789\" } } ] }, { \"Bitmap\" : \"filename\" , \"letterSpacing\" : 5 , \"String\" : [{ \"isMultiline\" : true , \"header\" : { \"text\" : \"Merchant Name\" , \"align\" : \"centre\" , \"size\" : \"large\" , \"isBold\" : true }, \"body\" : { \"text\" : \"Allen Tobi\" , \"alignment\" : \"centre\" , \"size\" : \"normal\" , \"isBold\" : false } }, { \"isMultiline\" : false , \"header\" : { \"text\" : \"Reference Number\" , \"align\" : \"left\" , \"size\" : \"large\" , \"isBold\" : true }, \"body\" : { \"text\" : \"abcd1234\" } } ] } ] }","title":"Sample Print Json Object"},{"location":"androidpos/#sample-print-kotlin-object","text":"data class PrintObject ( @Json ( name = \"Receipt\" ) val printFields : List < PrintField > ) data class PrintField ( @Json ( name = \"Bitmap\" ) val filename : String , @Json ( name = \"letterSpacing\" ) val letterSpacing : Int , @Json ( name = \"String\" ) val stringFields : List < StringField > ) data class StringField ( @Json ( name = \"isMultiline\" ) val isMultiline : Boolean , @Json ( name = \"header\" ) val header : TextField , @Json ( name = \"body\" ) val body : TextField ) data class TextField ( @Json ( name = \"text\" ) val text : String , @Json ( name = \"align\" ) val align : String? , @Json ( name = \"size\" ) val size : String? , @Json ( name = \"isBold\" ) val isBold : Boolean? )","title":"Sample Print Kotlin Object"},{"location":"androidpos/#sample-print-intent-request","text":"fun print ( jsonString : String ) { val intent = Intent ( PRINTER_INTENT ) intent . putExtra ( \"jsonData\" , jsonString ) startActivityForResult ( intent , PRINT_REQUEST ) }","title":"Sample Print Intent Request"},{"location":"androidpos/#field-description","text":"Name Type Description Values isMultiline Boolean Determine if header and body are printed on different lines true/false isBold Boolean Determine if to bolden TextField true/false align String Set alignment center, left, right size String Set text size small, normal, large Bitmap String Path to image file saved on disk","title":"Field Description"},{"location":"androidpos/#notes-on-printing","text":"When the object TextField has an empty text field for both header and body the StringField is discarded. If an empty space is needed to save as a line break, specify a text field containing at least a space for the TextField header . When isMultiline is set to false on a StringField object, the fields align and isBold are ignored for the TextField body . If you need to print a single line. Set isMultiline to true and set the text field on the body TextField to an empty string.","title":"Notes on Printing"},{"location":"androidpos/#settings","text":"Intent Name = com.globalaccelerex.settings This page allows you open a Settings GUI to allow a user carry out Key Exchange and Printing Parameters","title":"SETTINGS"},{"location":"androidpos/#sample-settings-intent-request","text":"fun launchSettings () { startActivityForResult ( Intent ( SETTINGS_INTENT ), SETTINGS_REQUEST ) }","title":"Sample Settings Intent Request"},{"location":"androidpos/mockapp/","text":"Mock App To simulate the functionalities of the GA payment app, especially for quick development iterations, you want to install the mock app on your mobile phone or emulator. Download the Mock App here","title":"Mock App"},{"location":"androidpos/mockapp/#mock-app","text":"To simulate the functionalities of the GA payment app, especially for quick development iterations, you want to install the mock app on your mobile phone or emulator. Download the Mock App here","title":"Mock App"},{"location":"mpos/","text":"Getting Started Our mpos sdk provides a device agnostic interface for interacting with and accepting card payment with any of our supported mpos devices. The SDK currently supports Android devices with API 21+. Getting started Add the dependency with the latest version to your apps build.gradle dependency section depedencies { implementation \"com.globalaccelerex.mpos:payment:<latest-version>\" } Optionally , if you want to support receipt printing via portable bluetooth receipt printer, you can add the following dependency. implementation \"com.globalaccelerex.printer:bluetooth:<lastest-version>\" In your project's build.gradle , update the allProjects repository section with the maven repository link. Contact us for the link. allprojects { repositories { google() mavenCentral() maven { url \"https://<url-shared-with-you>\" } } } Related Topics Build on Android","title":"Getting Started"},{"location":"mpos/#getting-started","text":"Our mpos sdk provides a device agnostic interface for interacting with and accepting card payment with any of our supported mpos devices. The SDK currently supports Android devices with API 21+.","title":"Getting Started"},{"location":"mpos/#getting-started_1","text":"Add the dependency with the latest version to your apps build.gradle dependency section depedencies { implementation \"com.globalaccelerex.mpos:payment:<latest-version>\" } Optionally , if you want to support receipt printing via portable bluetooth receipt printer, you can add the following dependency. implementation \"com.globalaccelerex.printer:bluetooth:<lastest-version>\" In your project's build.gradle , update the allProjects repository section with the maven repository link. Contact us for the link. allprojects { repositories { google() mavenCentral() maven { url \"https://<url-shared-with-you>\" } } }","title":"Getting started"},{"location":"mpos/#related-topics","text":"Build on Android","title":"Related Topics"},{"location":"mpos/bluetooth-receipt-printing/","text":"Receipt printing via bluetooth printer A number of POS thermal printers are supported. To take advantage of our Bluetooth printer SDK for your receipt printing purposes, you want to include the following dependency in your app build.gradle file. dependencies { implementation \"com.globalaccelerex.printer:bluetooth:1.0.0\" } Also, ensure the following maven declarations are set in your maven repositories block repositorries { maven { url \"https://<url-shared-with-you>\" } maven { url 'https://jitpack.io' } } Print request construction You want to construct your receipt print request using the ReceiptRequest class. You can send multiple receipts and they would be printed one after the other. To print a logo on the receipt, supply a valid internet or publicly accessible uri in the bitmapUri field. A StringField is a HEADER:BODY kind of formatted print line. If body is omitted (that is blank), the header is printed alone as a single line without the colon. (You don't need to supply the colon otherwise.) To print a blank line after a StringField set the blanks field to the number of blank lines you wish to print. ( Note that a single bank line can be somewhat large. Check that it fits your purpose ) Underline To underline a field, set the underline field of the LineField to true . Bold Text To print a bold text, set the isBold field to true . Alignment You can align text to the left, center or right ( left by default ). Use the FieldAlign enum Font size Possible font sizes are normal , large , x-large , and small . QR Code QR CODE can be printed by supplying the qrString parameter of the StringField . In this case, header and body should be left blank (that is empty strings). Example receipt printing in an Android Activity. private val printReceipt = registerForActivityResult ( ReceiptPrinterContract ()) { success -> Timber . d ( \"Receipt printed: $ success \" ) } override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContentView ( R . layout . activity_main ) findViewById < Button > ( R . id . button_print_sample ). setOnClickListener { val receiptRequest = receiptRequest ( sampleResponse ) printReceipt . launch ( receiptRequest ) } } private fun receiptRequest ( pr : PaymentResponse ) = ReceiptRequest ( receipts = listOf ( Receipt ( bitmapUri = pr . bankLogo , // Bank logo should be an internet or publicly accessible uri of the logo. stringFields = listOf ( StringFields ( header = LineField ( text = pr . merchantName ?: \"\" ), body = LineField ( text = \"\" ) ), StringFields ( isMultiline = true , header = LineField ( text = \"LOCATION\" ), body = LineField ( text = pr . merchantAddress ?: \"\" , underline = true ) ), StringFields ( header = LineField ( text = \"TERMINAL ID\" ), body = LineField ( text = pr . terminalId ?: \"\" ) ), StringFields ( header = LineField ( text = pr . transactionType . uppercase (), align = FieldAlign . center , isBold = true , size = \"large\" ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = \"STAN\" , isBold = true , size = FONT_SIZE_LARGE ), body = LineField ( text = pr . stan ?: \"\" ) ), StringFields ( header = LineField ( text = \"DATE/TIME\" ), body = LineField ( text = pr . datetime ?: \"\" ) ), StringFields ( header = LineField ( text = \"AMOUNT\" , isBold = true , size = FONT_SIZE_LARGE , blanks = 1 ), body = LineField ( text = pr . amount ?: \"\" ) ), StringFields ( header = LineField ( text = pr . appLabel ?: \"Debit Card\" ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = pr . maskedPan ?: \"\" , align = FieldAlign . center ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = pr . cardHolderName ?: \"Cardholder\" ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = \"EXP. DATE.\" ), body = LineField ( text = pr . cardExpireDate ?: \"\" ) ), StringFields ( header = LineField ( text = if ( pr . approved ()) \"APPROVED\" else \"DECLINED\" , align = FieldAlign . center , isBold = true ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = \"RRN\" ), body = LineField ( text = pr . rrn ?: \"\" ) ), StringFields ( header = LineField ( text = \"AUTHCODE\" ), body = LineField ( text = pr . authcode ?: \"\" ) ), StringFields ( header = LineField ( text = \"STATUS CODE\" ), body = LineField ( text = pr . statusCode ?: \"\" ) ), StringFields ( header = LineField ( text = \"RESPONSE STATUS\" ), body = LineField ( text = pr . message ?: \"\" ) ), StringFields ( header = LineField ( text = \"AID\" ), body = LineField ( text = pr . aid ?: \"\" ) ), StringFields ( header = LineField ( text = pr . footerMessage ?: \"\" ), body = LineField ( text = \"\" ) ), ) ) ) )","title":"Receipt printing via bluetooth printer"},{"location":"mpos/bluetooth-receipt-printing/#receipt-printing-via-bluetooth-printer","text":"A number of POS thermal printers are supported. To take advantage of our Bluetooth printer SDK for your receipt printing purposes, you want to include the following dependency in your app build.gradle file. dependencies { implementation \"com.globalaccelerex.printer:bluetooth:1.0.0\" } Also, ensure the following maven declarations are set in your maven repositories block repositorries { maven { url \"https://<url-shared-with-you>\" } maven { url 'https://jitpack.io' } }","title":"Receipt printing via bluetooth printer"},{"location":"mpos/bluetooth-receipt-printing/#print-request-construction","text":"You want to construct your receipt print request using the ReceiptRequest class. You can send multiple receipts and they would be printed one after the other. To print a logo on the receipt, supply a valid internet or publicly accessible uri in the bitmapUri field. A StringField is a HEADER:BODY kind of formatted print line. If body is omitted (that is blank), the header is printed alone as a single line without the colon. (You don't need to supply the colon otherwise.) To print a blank line after a StringField set the blanks field to the number of blank lines you wish to print. ( Note that a single bank line can be somewhat large. Check that it fits your purpose ) Underline To underline a field, set the underline field of the LineField to true . Bold Text To print a bold text, set the isBold field to true . Alignment You can align text to the left, center or right ( left by default ). Use the FieldAlign enum Font size Possible font sizes are normal , large , x-large , and small . QR Code QR CODE can be printed by supplying the qrString parameter of the StringField . In this case, header and body should be left blank (that is empty strings). Example receipt printing in an Android Activity. private val printReceipt = registerForActivityResult ( ReceiptPrinterContract ()) { success -> Timber . d ( \"Receipt printed: $ success \" ) } override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContentView ( R . layout . activity_main ) findViewById < Button > ( R . id . button_print_sample ). setOnClickListener { val receiptRequest = receiptRequest ( sampleResponse ) printReceipt . launch ( receiptRequest ) } } private fun receiptRequest ( pr : PaymentResponse ) = ReceiptRequest ( receipts = listOf ( Receipt ( bitmapUri = pr . bankLogo , // Bank logo should be an internet or publicly accessible uri of the logo. stringFields = listOf ( StringFields ( header = LineField ( text = pr . merchantName ?: \"\" ), body = LineField ( text = \"\" ) ), StringFields ( isMultiline = true , header = LineField ( text = \"LOCATION\" ), body = LineField ( text = pr . merchantAddress ?: \"\" , underline = true ) ), StringFields ( header = LineField ( text = \"TERMINAL ID\" ), body = LineField ( text = pr . terminalId ?: \"\" ) ), StringFields ( header = LineField ( text = pr . transactionType . uppercase (), align = FieldAlign . center , isBold = true , size = \"large\" ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = \"STAN\" , isBold = true , size = FONT_SIZE_LARGE ), body = LineField ( text = pr . stan ?: \"\" ) ), StringFields ( header = LineField ( text = \"DATE/TIME\" ), body = LineField ( text = pr . datetime ?: \"\" ) ), StringFields ( header = LineField ( text = \"AMOUNT\" , isBold = true , size = FONT_SIZE_LARGE , blanks = 1 ), body = LineField ( text = pr . amount ?: \"\" ) ), StringFields ( header = LineField ( text = pr . appLabel ?: \"Debit Card\" ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = pr . maskedPan ?: \"\" , align = FieldAlign . center ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = pr . cardHolderName ?: \"Cardholder\" ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = \"EXP. DATE.\" ), body = LineField ( text = pr . cardExpireDate ?: \"\" ) ), StringFields ( header = LineField ( text = if ( pr . approved ()) \"APPROVED\" else \"DECLINED\" , align = FieldAlign . center , isBold = true ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = \"RRN\" ), body = LineField ( text = pr . rrn ?: \"\" ) ), StringFields ( header = LineField ( text = \"AUTHCODE\" ), body = LineField ( text = pr . authcode ?: \"\" ) ), StringFields ( header = LineField ( text = \"STATUS CODE\" ), body = LineField ( text = pr . statusCode ?: \"\" ) ), StringFields ( header = LineField ( text = \"RESPONSE STATUS\" ), body = LineField ( text = pr . message ?: \"\" ) ), StringFields ( header = LineField ( text = \"AID\" ), body = LineField ( text = pr . aid ?: \"\" ) ), StringFields ( header = LineField ( text = pr . footerMessage ?: \"\" ), body = LineField ( text = \"\" ) ), ) ) ) )","title":"Print request construction"},{"location":"mpos/build-on-android/","text":"Build on Android Prerequisites and assumptions To build with the mPOS SDK, the following must be observed: Your device has been setup on the Global Accelerex TMS platform with all the necessary parameters (Terminal ID, Merchant ID, etc) as obtained from your bank. Your application minSdkVersion is API 21 (Lollipop 5.0) or later Your application targetSdkVersion is API 31 (R, 12.0) or later Your application uses AndroidX Both Kotlin and Java languages are supported Step 1: Configure Gradle for the mPOS SDK Setup maven repository with the url shared with you In you project level build.gradle or otherwise. allprojects { repositories { google() mavenCentral() maven { url \"https://<url-shared-with-you>\" } } } The following should be configured in the app level build.gradle file - Configure build dependencies depedencies { implementation \"com.globalaccelerex.mpos:payment:<latest-version>\" } - Add compile options to support Java version 1.8 compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } Add kotlin options to target 1.8 jvm version kotlinOptions { jvmTarget = '1.8' } Remove some offending packaging options included in some of the libraries that were used to build the sdk. Add the following in your android block: packagingOptions { exclude 'META-INF/DEPENDENCIES' exclude 'META-INF/LICENSE' exclude 'META-INF/LICENSE.txt' exclude 'META-INF/license.txt' exclude 'META-INF/NOTICE' exclude 'META-INF/NOTICE.txt' exclude 'META-INF/notice.txt' exclude 'META-INF/ASL2.0' exclude 'META-INF/LGPL2.1' exclude 'AndroidManifest.xml' } Step 3: Create a CheckoutFragment or activity Kotlin Java import android.os.Bundle import android.view.View import android.widget.Toast import androidx.fragment.app.Fragment import com.globalaccelerex.mpos.payment.MposPayment import com.globalaccelerex.mpos.payment.PaymentRequest import com.globalaccelerex.mpos.payment.RequestType import com.globalaccelerex.mpos.payment.TransactionStatus class CheckoutFragment : Fragment ( R . layout . fragment_checkout ) { override fun onViewCreated ( view : View , savedInstanceState : Bundle?) { super . onViewCreated ( view , savedInstanceState ) val binding = FragmentCheckoutBinding . bind ( view ) binding . buttonCheckout . setOnClickListener { startCheckout () } } private fun startCheckout () { } } import android.os.Bundle ; import android.view.View ; import androidx.annotation.NonNull ; import androidx.annotation.Nullable ; import androidx.fragment.app.Fragment ; public class CheckoutFragment extends Fragment { public CheckoutFragment () { super ( R . layout . fragment_checkout ); } @Override public void onViewCreated ( @NonNull View view , @Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ); FragmentCheckoutBinding binding = FragmentCheckoutBinding . bind ( view ); binding . buttonCheckout . setOnClickListener ( v -> startCheckout ()); } private void startCheckout () { } } Step 4: Add code to start the payment flow and handle result Register for activity result. In this callback, you will receive the result for the payment/transaction processing. Implement the startCheckout method by adding code to build the payment request. Kotlin Java class CheckoutFragment : Fragment ( R . layout . fragment_checkout ) { // Register the the payment result using activity results API private val cardPayment = registerForActivityResult ( MposPayment . CardTransactionContract ()) { result -> when ( result . status ) { TransactionStatus . APPROVED -> { showCheckoutResult ( result . responseData !! ) } TransactionStatus . DECLINED -> { val response = result . responseData !! Toast . makeText ( requireContext (), response . message , Toast . LENGTH_SHORT ). show () } TransactionStatus . FAILED , TransactionStatus . CANCELLED , TransactionStatus . TIMEOUT -> { // Transaction failed Check the response message Toast . makeText ( requireContext (), result . responseMessage , Toast . LENGTH_SHORT ) . show () } } } private fun showCheckoutResult ( responseData : CardTransactionResponse ) { // Show result } override fun onViewCreated ( view : View , savedInstanceState : Bundle?) { super . onViewCreated ( view , savedInstanceState ) val binding = FragmentCheckoutBinding . bind ( view ) binding . buttonCheckout . setOnClickListener { startCheckout () } } private fun startCheckout () { // Create a checkout request val checkoutAmount = 2.0 val request = PaymentRequest { requestType = RequestType . PURCHASE amount = checkoutAmount printReceipt = false } // Start the payment process cardPayment . launch ( request ) } } public class CheckoutFragment extends Fragment { public CheckoutFragment () { super ( R . layout . fragment_checkout ); } private final ActivityResultLauncher < PaymentRequest > cardPayment = registerForActivityResult ( new MposPayment . CardTransactionContract (), this :: onActivityResult ); private void onActivityResult ( TransactionResult result ) { switch ( result . getStatus ()) { case APPROVED : CardTransactionResponse successResponse = result . getResponseData (); assert successResponse != null ; showCheckoutResult ( successResponse ); break ; case DECLINED : CardTransactionResponse response = result . getResponseData (); assert response != null ; Toast . makeText ( getContext (), response . getMessage (), Toast . LENGTH_SHORT ). show (); break ; case FAILED : case CANCELLED : case TIMEOUT : Toast . makeText ( getContext (), result . getResponseMessage (), Toast . LENGTH_SHORT ). show (); break ; } } private void showCheckoutResult ( CardTransactionResponse successResponse ) { } @Override public void onViewCreated ( @NonNull View view , @Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ); FragmentCheckoutBinding binding = FragmentCheckoutBinding . bind ( view ); binding . buttonCheckout . setOnClickListener ( v -> startCheckout ()); } private void startCheckout () { double checkoutAmount = 2.0 ; PaymentRequest request = new PaymentRequest . Builder () . setAmount ( checkoutAmount ) . setRequestType ( RequestType . PURCHASE ) . build (); cardPayment . launch ( request ); } }","title":"Build on Android"},{"location":"mpos/build-on-android/#build-on-android","text":"","title":"Build on Android"},{"location":"mpos/build-on-android/#prerequisites-and-assumptions","text":"To build with the mPOS SDK, the following must be observed: Your device has been setup on the Global Accelerex TMS platform with all the necessary parameters (Terminal ID, Merchant ID, etc) as obtained from your bank. Your application minSdkVersion is API 21 (Lollipop 5.0) or later Your application targetSdkVersion is API 31 (R, 12.0) or later Your application uses AndroidX Both Kotlin and Java languages are supported","title":"Prerequisites and assumptions"},{"location":"mpos/build-on-android/#step-1-configure-gradle-for-the-mpos-sdk","text":"Setup maven repository with the url shared with you In you project level build.gradle or otherwise. allprojects { repositories { google() mavenCentral() maven { url \"https://<url-shared-with-you>\" } } } The following should be configured in the app level build.gradle file - Configure build dependencies depedencies { implementation \"com.globalaccelerex.mpos:payment:<latest-version>\" } - Add compile options to support Java version 1.8 compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } Add kotlin options to target 1.8 jvm version kotlinOptions { jvmTarget = '1.8' } Remove some offending packaging options included in some of the libraries that were used to build the sdk. Add the following in your android block: packagingOptions { exclude 'META-INF/DEPENDENCIES' exclude 'META-INF/LICENSE' exclude 'META-INF/LICENSE.txt' exclude 'META-INF/license.txt' exclude 'META-INF/NOTICE' exclude 'META-INF/NOTICE.txt' exclude 'META-INF/notice.txt' exclude 'META-INF/ASL2.0' exclude 'META-INF/LGPL2.1' exclude 'AndroidManifest.xml' }","title":"Step 1: Configure Gradle for the mPOS SDK"},{"location":"mpos/build-on-android/#step-3-create-a-checkoutfragment-or-activity","text":"Kotlin Java import android.os.Bundle import android.view.View import android.widget.Toast import androidx.fragment.app.Fragment import com.globalaccelerex.mpos.payment.MposPayment import com.globalaccelerex.mpos.payment.PaymentRequest import com.globalaccelerex.mpos.payment.RequestType import com.globalaccelerex.mpos.payment.TransactionStatus class CheckoutFragment : Fragment ( R . layout . fragment_checkout ) { override fun onViewCreated ( view : View , savedInstanceState : Bundle?) { super . onViewCreated ( view , savedInstanceState ) val binding = FragmentCheckoutBinding . bind ( view ) binding . buttonCheckout . setOnClickListener { startCheckout () } } private fun startCheckout () { } } import android.os.Bundle ; import android.view.View ; import androidx.annotation.NonNull ; import androidx.annotation.Nullable ; import androidx.fragment.app.Fragment ; public class CheckoutFragment extends Fragment { public CheckoutFragment () { super ( R . layout . fragment_checkout ); } @Override public void onViewCreated ( @NonNull View view , @Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ); FragmentCheckoutBinding binding = FragmentCheckoutBinding . bind ( view ); binding . buttonCheckout . setOnClickListener ( v -> startCheckout ()); } private void startCheckout () { } }","title":"Step 3: Create a CheckoutFragment or activity"},{"location":"mpos/build-on-android/#step-4-add-code-to-start-the-payment-flow-and-handle-result","text":"Register for activity result. In this callback, you will receive the result for the payment/transaction processing. Implement the startCheckout method by adding code to build the payment request. Kotlin Java class CheckoutFragment : Fragment ( R . layout . fragment_checkout ) { // Register the the payment result using activity results API private val cardPayment = registerForActivityResult ( MposPayment . CardTransactionContract ()) { result -> when ( result . status ) { TransactionStatus . APPROVED -> { showCheckoutResult ( result . responseData !! ) } TransactionStatus . DECLINED -> { val response = result . responseData !! Toast . makeText ( requireContext (), response . message , Toast . LENGTH_SHORT ). show () } TransactionStatus . FAILED , TransactionStatus . CANCELLED , TransactionStatus . TIMEOUT -> { // Transaction failed Check the response message Toast . makeText ( requireContext (), result . responseMessage , Toast . LENGTH_SHORT ) . show () } } } private fun showCheckoutResult ( responseData : CardTransactionResponse ) { // Show result } override fun onViewCreated ( view : View , savedInstanceState : Bundle?) { super . onViewCreated ( view , savedInstanceState ) val binding = FragmentCheckoutBinding . bind ( view ) binding . buttonCheckout . setOnClickListener { startCheckout () } } private fun startCheckout () { // Create a checkout request val checkoutAmount = 2.0 val request = PaymentRequest { requestType = RequestType . PURCHASE amount = checkoutAmount printReceipt = false } // Start the payment process cardPayment . launch ( request ) } } public class CheckoutFragment extends Fragment { public CheckoutFragment () { super ( R . layout . fragment_checkout ); } private final ActivityResultLauncher < PaymentRequest > cardPayment = registerForActivityResult ( new MposPayment . CardTransactionContract (), this :: onActivityResult ); private void onActivityResult ( TransactionResult result ) { switch ( result . getStatus ()) { case APPROVED : CardTransactionResponse successResponse = result . getResponseData (); assert successResponse != null ; showCheckoutResult ( successResponse ); break ; case DECLINED : CardTransactionResponse response = result . getResponseData (); assert response != null ; Toast . makeText ( getContext (), response . getMessage (), Toast . LENGTH_SHORT ). show (); break ; case FAILED : case CANCELLED : case TIMEOUT : Toast . makeText ( getContext (), result . getResponseMessage (), Toast . LENGTH_SHORT ). show (); break ; } } private void showCheckoutResult ( CardTransactionResponse successResponse ) { } @Override public void onViewCreated ( @NonNull View view , @Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ); FragmentCheckoutBinding binding = FragmentCheckoutBinding . bind ( view ); binding . buttonCheckout . setOnClickListener ( v -> startCheckout ()); } private void startCheckout () { double checkoutAmount = 2.0 ; PaymentRequest request = new PaymentRequest . Builder () . setAmount ( checkoutAmount ) . setRequestType ( RequestType . PURCHASE ) . build (); cardPayment . launch ( request ); } }","title":"Step 4: Add code to start the payment flow and handle result"},{"location":"mpos/custom-worker-factory/","text":"Custom Work Manager Factory Support If your app makes use of a custom work manager factory, for example, when using hilt-worker library, you will have to make a few changes before you can use the mpos sdk successfully. Applications that wants to handle manual initialization of work manager must implement MposWorkerDelegate in their custom application class, otherwise their application would crash at runtime. To initialize work manager manually (maybe you want to inject some dependencies using custom [androidx.work.WorkerFactory], for example when using Dagger Hilt Worker Injection) Your application class can look like this class MyApp : Application , Configuration . Provider , MposWorkerDelegate { // This will be provided to the mpos worker, and you will also add your custom worker factories to this. private val delegatingWorkerFactory : DelegatingWorkerFactory = DelegatingWorkerFactory () override fun getWorkManagerConfiguration (): Configuration { return Configuration . Builder () . setWorkerFactory ( delegatingWorkerFactory ) . build () } override fun delegatingWorkerFactory (): DelegatingWorkerFactory { return delegatingWorkerFactory } // You may want to initialize your worker in the application onCreate or elsewhere. override fun onCreate () { super . onCreate () val myWorkerFactory = ... // Get your custom worker factor (e.g. for hilt, you would inject the HiltWorkerFactory here in the application) // Add your worker factory to the delegate you created above delegatingWorkerFactory . addFactory ( myWorkerFactory ) } } That's it. Afterwards, you can just get the WorkManager instance normally by calling [androidx.work.WorkManager.getInstance] supplying the application context. Like thus: WorkerManager.getInstance(applicationContext) Remember to disable default worker factory in your AndroidManifest.xml <provider android:name= \"androidx.startup.InitializationProvider\" android:authorities= \"${applicationId}.androidx-startup\" android:exported= \"false\" tools:node= \"merge\" > <!-- If you are using androidx.startup to initialize other components --> <meta-data android:name= \"androidx.work.WorkManagerInitializer\" android:value= \"androidx.startup\" tools:node= \"remove\" /> </provider>","title":"Custom Work Manager Factory Support"},{"location":"mpos/custom-worker-factory/#custom-work-manager-factory-support","text":"If your app makes use of a custom work manager factory, for example, when using hilt-worker library, you will have to make a few changes before you can use the mpos sdk successfully. Applications that wants to handle manual initialization of work manager must implement MposWorkerDelegate in their custom application class, otherwise their application would crash at runtime. To initialize work manager manually (maybe you want to inject some dependencies using custom [androidx.work.WorkerFactory], for example when using Dagger Hilt Worker Injection) Your application class can look like this class MyApp : Application , Configuration . Provider , MposWorkerDelegate { // This will be provided to the mpos worker, and you will also add your custom worker factories to this. private val delegatingWorkerFactory : DelegatingWorkerFactory = DelegatingWorkerFactory () override fun getWorkManagerConfiguration (): Configuration { return Configuration . Builder () . setWorkerFactory ( delegatingWorkerFactory ) . build () } override fun delegatingWorkerFactory (): DelegatingWorkerFactory { return delegatingWorkerFactory } // You may want to initialize your worker in the application onCreate or elsewhere. override fun onCreate () { super . onCreate () val myWorkerFactory = ... // Get your custom worker factor (e.g. for hilt, you would inject the HiltWorkerFactory here in the application) // Add your worker factory to the delegate you created above delegatingWorkerFactory . addFactory ( myWorkerFactory ) } } That's it. Afterwards, you can just get the WorkManager instance normally by calling [androidx.work.WorkManager.getInstance] supplying the application context. Like thus: WorkerManager.getInstance(applicationContext) Remember to disable default worker factory in your AndroidManifest.xml <provider android:name= \"androidx.startup.InitializationProvider\" android:authorities= \"${applicationId}.androidx-startup\" android:exported= \"false\" tools:node= \"merge\" > <!-- If you are using androidx.startup to initialize other components --> <meta-data android:name= \"androidx.work.WorkManagerInitializer\" android:value= \"androidx.startup\" tools:node= \"remove\" /> </provider>","title":"Custom Work Manager Factory Support"},{"location":"mpos/e-receipt/","text":"E-Receipt Your customer can receive an e-receipt in his email box when an email address is supplied. The following is an example of a payment request with customer information supplied for receiving of e-receipt. Kotlin Java val purchaseRequest = PaymentRequest { amount = 2.0 requestType = RequestType . PURCHASE customerInfo = CustomerInfo { email = \"customerEmail@gmail.com\" } } cardPayment . launch ( purchaseRequest ) CustomerInfo customerInfo = new CustomerInfo . Builder () . setEmail ( \"customerEmail@gmail.com\" ) . build (); PaymentRequest purchaseRequest = new PaymentRequest . Builder () . setAmount ( 2.0 ) . setRequestType ( RequestType . PURCHASE ) . setCustomerInfo ( customerInfo ) . build (); cardPayment . launch ( purchaseRequest );","title":"E-Receipt"},{"location":"mpos/e-receipt/#e-receipt","text":"Your customer can receive an e-receipt in his email box when an email address is supplied. The following is an example of a payment request with customer information supplied for receiving of e-receipt. Kotlin Java val purchaseRequest = PaymentRequest { amount = 2.0 requestType = RequestType . PURCHASE customerInfo = CustomerInfo { email = \"customerEmail@gmail.com\" } } cardPayment . launch ( purchaseRequest ) CustomerInfo customerInfo = new CustomerInfo . Builder () . setEmail ( \"customerEmail@gmail.com\" ) . build (); PaymentRequest purchaseRequest = new PaymentRequest . Builder () . setAmount ( 2.0 ) . setRequestType ( RequestType . PURCHASE ) . setCustomerInfo ( customerInfo ) . build (); cardPayment . launch ( purchaseRequest );","title":"E-Receipt"}]}