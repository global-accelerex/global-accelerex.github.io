{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Accelerex POS We support a variety of smart POS terminals","title":"Home"},{"location":"#welcome-to-accelerex-pos","text":"We support a variety of smart POS terminals","title":"Welcome to Accelerex POS"},{"location":"mpos/","text":"Getting Started Our mpos sdk provides a device agnostic interface for interacting with and accepting card payment with any of our supported mpos devices. The SDK currently supports Android devices with API 21+. Getting started Add the dependency with the latest version to your apps build.gradle dependency section depedencies { implementation \"com.globalaccelerex.mpos:payment:<latest-version>\" } Optionally , if you want to support receipt printing via portable bluetooth receipt printer, you can add the following dependency. implementation \"com.globalaccelerex.printer:bluetooth:<lastest-version>\" In your project's build.gradle , update the allProjects repository section with the maven repository link. Contact us for the link. allprojects { repositories { google() mavenCentral() maven { url \"https://<url-shared-with-you>\" } } } Related Topics Build on Android","title":"Getting Started"},{"location":"mpos/#getting-started","text":"Our mpos sdk provides a device agnostic interface for interacting with and accepting card payment with any of our supported mpos devices. The SDK currently supports Android devices with API 21+.","title":"Getting Started"},{"location":"mpos/#getting-started_1","text":"Add the dependency with the latest version to your apps build.gradle dependency section depedencies { implementation \"com.globalaccelerex.mpos:payment:<latest-version>\" } Optionally , if you want to support receipt printing via portable bluetooth receipt printer, you can add the following dependency. implementation \"com.globalaccelerex.printer:bluetooth:<lastest-version>\" In your project's build.gradle , update the allProjects repository section with the maven repository link. Contact us for the link. allprojects { repositories { google() mavenCentral() maven { url \"https://<url-shared-with-you>\" } } }","title":"Getting started"},{"location":"mpos/#related-topics","text":"Build on Android","title":"Related Topics"},{"location":"mpos/bluetooth-receipt-printing/","text":"Receipt printing via bluetooth printer A number of POS thermal printers are supported. To take advantage of our Bluetooth printer SDK for your receipt printing purposes, you want to include the following dependency in your app build.gradle file. dependencies { implementation \"com.globalaccelerex.printer:bluetooth:1.0.0\" } Also, ensure the following maven declarations are set in your maven repositories block repositorries { maven { url \"https://<url-shared-with-you>\" } maven { url 'https://jitpack.io' } } Print request construction You want to construct your receipt print request using the ReceiptRequest class. You can send multiple receipts and they would be printed one after the other. To print a logo on the receipt, supply a valid internet or publicly accessible uri in the bitmapUri field. A StringField is a HEADER:BODY kind of formatted print line. If body is omitted (that is blank), the header is printed alone as a single line without the colon. (You don't need to supply the colon otherwise.) To print a blank line after a StringField set the blanks field to the number of blank lines you wish to print. ( Note that a single bank line can be somewhat large. Check that it fits your purpose ) Underline To underline a field, set the underline field of the LineField to true . Bold Text To print a bold text, set the isBold field to true . Alignment You can align text to the left, center or right ( left by default ). Use the FieldAlign enum Font size Possible font sizes are normal , large , x-large , and small . QR Code QR CODE can be printed by supplying the qrString parameter of the StringField . In this case, header and body should be left blank (that is empty strings). Example receipt printing in an Android Activity. private val printReceipt = registerForActivityResult ( ReceiptPrinterContract ()) { success -> Timber . d ( \"Receipt printed: $ success \" ) } override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContentView ( R . layout . activity_main ) findViewById < Button > ( R . id . button_print_sample ). setOnClickListener { val receiptRequest = receiptRequest ( sampleResponse ) printReceipt . launch ( receiptRequest ) } } private fun receiptRequest ( pr : PaymentResponse ) = ReceiptRequest ( receipts = listOf ( Receipt ( bitmapUri = pr . bankLogo , // Bank logo should be an internet or publicly accessible uri of the logo. stringFields = listOf ( StringFields ( header = LineField ( text = pr . merchantName ?: \"\" ), body = LineField ( text = \"\" ) ), StringFields ( isMultiline = true , header = LineField ( text = \"LOCATION\" ), body = LineField ( text = pr . merchantAddress ?: \"\" , underline = true ) ), StringFields ( header = LineField ( text = \"TERMINAL ID\" ), body = LineField ( text = pr . terminalId ?: \"\" ) ), StringFields ( header = LineField ( text = pr . transactionType . uppercase (), align = FieldAlign . center , isBold = true , size = \"large\" ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = \"STAN\" , isBold = true , size = FONT_SIZE_LARGE ), body = LineField ( text = pr . stan ?: \"\" ) ), StringFields ( header = LineField ( text = \"DATE/TIME\" ), body = LineField ( text = pr . datetime ?: \"\" ) ), StringFields ( header = LineField ( text = \"AMOUNT\" , isBold = true , size = FONT_SIZE_LARGE , blanks = 1 ), body = LineField ( text = pr . amount ?: \"\" ) ), StringFields ( header = LineField ( text = pr . appLabel ?: \"Debit Card\" ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = pr . maskedPan ?: \"\" , align = FieldAlign . center ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = pr . cardHolderName ?: \"Cardholder\" ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = \"EXP. DATE.\" ), body = LineField ( text = pr . cardExpireDate ?: \"\" ) ), StringFields ( header = LineField ( text = if ( pr . approved ()) \"APPROVED\" else \"DECLINED\" , align = FieldAlign . center , isBold = true ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = \"RRN\" ), body = LineField ( text = pr . rrn ?: \"\" ) ), StringFields ( header = LineField ( text = \"AUTHCODE\" ), body = LineField ( text = pr . authcode ?: \"\" ) ), StringFields ( header = LineField ( text = \"STATUS CODE\" ), body = LineField ( text = pr . statusCode ?: \"\" ) ), StringFields ( header = LineField ( text = \"RESPONSE STATUS\" ), body = LineField ( text = pr . message ?: \"\" ) ), StringFields ( header = LineField ( text = \"AID\" ), body = LineField ( text = pr . aid ?: \"\" ) ), StringFields ( header = LineField ( text = pr . footerMessage ?: \"\" ), body = LineField ( text = \"\" ) ), ) ) ) )","title":"Receipt printing via bluetooth printer"},{"location":"mpos/bluetooth-receipt-printing/#receipt-printing-via-bluetooth-printer","text":"A number of POS thermal printers are supported. To take advantage of our Bluetooth printer SDK for your receipt printing purposes, you want to include the following dependency in your app build.gradle file. dependencies { implementation \"com.globalaccelerex.printer:bluetooth:1.0.0\" } Also, ensure the following maven declarations are set in your maven repositories block repositorries { maven { url \"https://<url-shared-with-you>\" } maven { url 'https://jitpack.io' } }","title":"Receipt printing via bluetooth printer"},{"location":"mpos/bluetooth-receipt-printing/#print-request-construction","text":"You want to construct your receipt print request using the ReceiptRequest class. You can send multiple receipts and they would be printed one after the other. To print a logo on the receipt, supply a valid internet or publicly accessible uri in the bitmapUri field. A StringField is a HEADER:BODY kind of formatted print line. If body is omitted (that is blank), the header is printed alone as a single line without the colon. (You don't need to supply the colon otherwise.) To print a blank line after a StringField set the blanks field to the number of blank lines you wish to print. ( Note that a single bank line can be somewhat large. Check that it fits your purpose ) Underline To underline a field, set the underline field of the LineField to true . Bold Text To print a bold text, set the isBold field to true . Alignment You can align text to the left, center or right ( left by default ). Use the FieldAlign enum Font size Possible font sizes are normal , large , x-large , and small . QR Code QR CODE can be printed by supplying the qrString parameter of the StringField . In this case, header and body should be left blank (that is empty strings). Example receipt printing in an Android Activity. private val printReceipt = registerForActivityResult ( ReceiptPrinterContract ()) { success -> Timber . d ( \"Receipt printed: $ success \" ) } override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) setContentView ( R . layout . activity_main ) findViewById < Button > ( R . id . button_print_sample ). setOnClickListener { val receiptRequest = receiptRequest ( sampleResponse ) printReceipt . launch ( receiptRequest ) } } private fun receiptRequest ( pr : PaymentResponse ) = ReceiptRequest ( receipts = listOf ( Receipt ( bitmapUri = pr . bankLogo , // Bank logo should be an internet or publicly accessible uri of the logo. stringFields = listOf ( StringFields ( header = LineField ( text = pr . merchantName ?: \"\" ), body = LineField ( text = \"\" ) ), StringFields ( isMultiline = true , header = LineField ( text = \"LOCATION\" ), body = LineField ( text = pr . merchantAddress ?: \"\" , underline = true ) ), StringFields ( header = LineField ( text = \"TERMINAL ID\" ), body = LineField ( text = pr . terminalId ?: \"\" ) ), StringFields ( header = LineField ( text = pr . transactionType . uppercase (), align = FieldAlign . center , isBold = true , size = \"large\" ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = \"STAN\" , isBold = true , size = FONT_SIZE_LARGE ), body = LineField ( text = pr . stan ?: \"\" ) ), StringFields ( header = LineField ( text = \"DATE/TIME\" ), body = LineField ( text = pr . datetime ?: \"\" ) ), StringFields ( header = LineField ( text = \"AMOUNT\" , isBold = true , size = FONT_SIZE_LARGE , blanks = 1 ), body = LineField ( text = pr . amount ?: \"\" ) ), StringFields ( header = LineField ( text = pr . appLabel ?: \"Debit Card\" ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = pr . maskedPan ?: \"\" , align = FieldAlign . center ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = pr . cardHolderName ?: \"Cardholder\" ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = \"EXP. DATE.\" ), body = LineField ( text = pr . cardExpireDate ?: \"\" ) ), StringFields ( header = LineField ( text = if ( pr . approved ()) \"APPROVED\" else \"DECLINED\" , align = FieldAlign . center , isBold = true ), body = LineField ( text = \"\" ) ), StringFields ( header = LineField ( text = \"RRN\" ), body = LineField ( text = pr . rrn ?: \"\" ) ), StringFields ( header = LineField ( text = \"AUTHCODE\" ), body = LineField ( text = pr . authcode ?: \"\" ) ), StringFields ( header = LineField ( text = \"STATUS CODE\" ), body = LineField ( text = pr . statusCode ?: \"\" ) ), StringFields ( header = LineField ( text = \"RESPONSE STATUS\" ), body = LineField ( text = pr . message ?: \"\" ) ), StringFields ( header = LineField ( text = \"AID\" ), body = LineField ( text = pr . aid ?: \"\" ) ), StringFields ( header = LineField ( text = pr . footerMessage ?: \"\" ), body = LineField ( text = \"\" ) ), ) ) ) )","title":"Print request construction"},{"location":"mpos/build-on-android/","text":"Build on Android Prerequisites and assumptions To build with the mPOS SDK, the following must be observed: Your device has been setup on the Global Accelerex TMS platform with all the necessary parameters (Terminal ID, Merchant ID, etc) as obtained from your bank. Your application minSdkVersion is API 21 (Lollipop 5.0) or later Your application targetSdkVersion is API 30 (Q, 11.0) or earlier Your application uses AndroidX Both Kotlin and Java languages are supported Step 1: Configure Gradle for the mPOS SDK Setup maven repository with the url shared with you In you project level build.gradle or otherwise. allprojects { repositories { google() mavenCentral() maven { url \"https://<url-shared-with-you>\" } } } The following should be configured in the app level build.gradle file - Configure build dependencies depedencies { implementation \"com.globalaccelerex.mpos:payment:<latest-version>\" } - Add compile options to support Java version 1.8 compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } Add kotlin options to target 1.8 jvm version kotlinOptions { jvmTarget = '1.8' } Remove some offending packaging options included in some of the libraries that were used to build the sdk. Add the following in your android block: packagingOptions { exclude 'META-INF/DEPENDENCIES' exclude 'META-INF/LICENSE' exclude 'META-INF/LICENSE.txt' exclude 'META-INF/license.txt' exclude 'META-INF/NOTICE' exclude 'META-INF/NOTICE.txt' exclude 'META-INF/notice.txt' exclude 'META-INF/ASL2.0' exclude 'META-INF/LGPL2.1' exclude 'AndroidManifest.xml' } Step 3: Create a CheckoutFragment or activity Kotlin import android.os.Bundle import android.view.View import android.widget.Toast import androidx.fragment.app.Fragment import com.globalaccelerex.mpos.payment.MposPayment import com.globalaccelerex.mpos.payment.PaymentRequest import com.globalaccelerex.mpos.payment.RequestType import com.globalaccelerex.mpos.payment.TransactionStatus class CheckoutFragment : Fragment ( R . layout . fragment_checkout ) { override fun onViewCreated ( view : View , savedInstanceState : Bundle?) { super . onViewCreated ( view , savedInstanceState ) val binding = FragmentCheckoutBinding . bind ( view ) binding . buttonCheckout . setOnClickListener { startCheckout () } } private fun startCheckout () { } } Java import android.os.Bundle ; import android.view.View ; import androidx.annotation.NonNull ; import androidx.annotation.Nullable ; import androidx.fragment.app.Fragment ; public class CheckoutFragment extends Fragment { public CheckoutFragment () { super ( R . layout . fragment_checkout ); } @Override public void onViewCreated ( @NonNull View view , @Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ); FragmentCheckoutBinding binding = FragmentCheckoutBinding . bind ( view ); binding . buttonCheckout . setOnClickListener ( v -> startCheckout ()); } private void startCheckout () { } } Step 4: Add code to start the payment flow and handle result Register for activity result. In this callback, you will receive the result for the payment/transaction processing. Implement the startCheckout method by adding code to build the payment request. Kotlin class CheckoutFragment : Fragment ( R . layout . fragment_checkout ) { // Register the the payment result using activity results API private val cardPayment = registerForActivityResult ( MposPayment . CardTransactionContract ()) { result -> when ( result . status ) { TransactionStatus . APPROVED -> { showCheckoutResult ( result . responseData !! ) } TransactionStatus . DECLINED -> { val response = result . responseData !! Toast . makeText ( requireContext (), response . message , Toast . LENGTH_SHORT ). show () } TransactionStatus . FAILED , TransactionStatus . CANCELLED , TransactionStatus . TIMEOUT -> { // Transaction failed Check the response message Toast . makeText ( requireContext (), result . responseMessage , Toast . LENGTH_SHORT ) . show () } } } private fun showCheckoutResult ( responseData : CardTransactionResponse ) { // Show result } override fun onViewCreated ( view : View , savedInstanceState : Bundle?) { super . onViewCreated ( view , savedInstanceState ) val binding = FragmentCheckoutBinding . bind ( view ) binding . buttonCheckout . setOnClickListener { startCheckout () } } private fun startCheckout () { // Create a checkout request val checkoutAmount = 2.0 val request = PaymentRequest { requestType = RequestType . PURCHASE amount = checkoutAmount printReceipt = false } // Start the payment process cardPayment . launch ( request ) } } Java public class CheckoutFragment extends Fragment { public CheckoutFragment () { super ( R . layout . fragment_checkout ); } private final ActivityResultLauncher < PaymentRequest > cardPayment = registerForActivityResult ( new MposPayment . CardTransactionContract (), this :: onActivityResult ); private void onActivityResult ( TransactionResult result ) { switch ( result . getStatus ()) { case APPROVED : CardTransactionResponse successResponse = result . getResponseData (); assert successResponse != null ; showCheckoutResult ( successResponse ); break ; case DECLINED : CardTransactionResponse response = result . getResponseData (); assert response != null ; Toast . makeText ( getContext (), response . getMessage (), Toast . LENGTH_SHORT ). show (); break ; case FAILED : case CANCELLED : case TIMEOUT : Toast . makeText ( getContext (), result . getResponseMessage (), Toast . LENGTH_SHORT ). show (); break ; } } private void showCheckoutResult ( CardTransactionResponse successResponse ) { } @Override public void onViewCreated ( @NonNull View view , @Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ); FragmentCheckoutBinding binding = FragmentCheckoutBinding . bind ( view ); binding . buttonCheckout . setOnClickListener ( v -> startCheckout ()); } private void startCheckout () { double checkoutAmount = 2.0 ; PaymentRequest request = new PaymentRequest . Builder () . setAmount ( checkoutAmount ) . setRequestType ( RequestType . PURCHASE ) . build (); cardPayment . launch ( request ); } }","title":"Build on Android"},{"location":"mpos/build-on-android/#build-on-android","text":"","title":"Build on Android"},{"location":"mpos/build-on-android/#prerequisites-and-assumptions","text":"To build with the mPOS SDK, the following must be observed: Your device has been setup on the Global Accelerex TMS platform with all the necessary parameters (Terminal ID, Merchant ID, etc) as obtained from your bank. Your application minSdkVersion is API 21 (Lollipop 5.0) or later Your application targetSdkVersion is API 30 (Q, 11.0) or earlier Your application uses AndroidX Both Kotlin and Java languages are supported","title":"Prerequisites and assumptions"},{"location":"mpos/build-on-android/#step-1-configure-gradle-for-the-mpos-sdk","text":"Setup maven repository with the url shared with you In you project level build.gradle or otherwise. allprojects { repositories { google() mavenCentral() maven { url \"https://<url-shared-with-you>\" } } } The following should be configured in the app level build.gradle file - Configure build dependencies depedencies { implementation \"com.globalaccelerex.mpos:payment:<latest-version>\" } - Add compile options to support Java version 1.8 compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } Add kotlin options to target 1.8 jvm version kotlinOptions { jvmTarget = '1.8' } Remove some offending packaging options included in some of the libraries that were used to build the sdk. Add the following in your android block: packagingOptions { exclude 'META-INF/DEPENDENCIES' exclude 'META-INF/LICENSE' exclude 'META-INF/LICENSE.txt' exclude 'META-INF/license.txt' exclude 'META-INF/NOTICE' exclude 'META-INF/NOTICE.txt' exclude 'META-INF/notice.txt' exclude 'META-INF/ASL2.0' exclude 'META-INF/LGPL2.1' exclude 'AndroidManifest.xml' }","title":"Step 1: Configure Gradle for the mPOS SDK"},{"location":"mpos/build-on-android/#step-3-create-a-checkoutfragment-or-activity","text":"Kotlin import android.os.Bundle import android.view.View import android.widget.Toast import androidx.fragment.app.Fragment import com.globalaccelerex.mpos.payment.MposPayment import com.globalaccelerex.mpos.payment.PaymentRequest import com.globalaccelerex.mpos.payment.RequestType import com.globalaccelerex.mpos.payment.TransactionStatus class CheckoutFragment : Fragment ( R . layout . fragment_checkout ) { override fun onViewCreated ( view : View , savedInstanceState : Bundle?) { super . onViewCreated ( view , savedInstanceState ) val binding = FragmentCheckoutBinding . bind ( view ) binding . buttonCheckout . setOnClickListener { startCheckout () } } private fun startCheckout () { } } Java import android.os.Bundle ; import android.view.View ; import androidx.annotation.NonNull ; import androidx.annotation.Nullable ; import androidx.fragment.app.Fragment ; public class CheckoutFragment extends Fragment { public CheckoutFragment () { super ( R . layout . fragment_checkout ); } @Override public void onViewCreated ( @NonNull View view , @Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ); FragmentCheckoutBinding binding = FragmentCheckoutBinding . bind ( view ); binding . buttonCheckout . setOnClickListener ( v -> startCheckout ()); } private void startCheckout () { } }","title":"Step 3: Create a CheckoutFragment or activity"},{"location":"mpos/build-on-android/#step-4-add-code-to-start-the-payment-flow-and-handle-result","text":"Register for activity result. In this callback, you will receive the result for the payment/transaction processing. Implement the startCheckout method by adding code to build the payment request. Kotlin class CheckoutFragment : Fragment ( R . layout . fragment_checkout ) { // Register the the payment result using activity results API private val cardPayment = registerForActivityResult ( MposPayment . CardTransactionContract ()) { result -> when ( result . status ) { TransactionStatus . APPROVED -> { showCheckoutResult ( result . responseData !! ) } TransactionStatus . DECLINED -> { val response = result . responseData !! Toast . makeText ( requireContext (), response . message , Toast . LENGTH_SHORT ). show () } TransactionStatus . FAILED , TransactionStatus . CANCELLED , TransactionStatus . TIMEOUT -> { // Transaction failed Check the response message Toast . makeText ( requireContext (), result . responseMessage , Toast . LENGTH_SHORT ) . show () } } } private fun showCheckoutResult ( responseData : CardTransactionResponse ) { // Show result } override fun onViewCreated ( view : View , savedInstanceState : Bundle?) { super . onViewCreated ( view , savedInstanceState ) val binding = FragmentCheckoutBinding . bind ( view ) binding . buttonCheckout . setOnClickListener { startCheckout () } } private fun startCheckout () { // Create a checkout request val checkoutAmount = 2.0 val request = PaymentRequest { requestType = RequestType . PURCHASE amount = checkoutAmount printReceipt = false } // Start the payment process cardPayment . launch ( request ) } } Java public class CheckoutFragment extends Fragment { public CheckoutFragment () { super ( R . layout . fragment_checkout ); } private final ActivityResultLauncher < PaymentRequest > cardPayment = registerForActivityResult ( new MposPayment . CardTransactionContract (), this :: onActivityResult ); private void onActivityResult ( TransactionResult result ) { switch ( result . getStatus ()) { case APPROVED : CardTransactionResponse successResponse = result . getResponseData (); assert successResponse != null ; showCheckoutResult ( successResponse ); break ; case DECLINED : CardTransactionResponse response = result . getResponseData (); assert response != null ; Toast . makeText ( getContext (), response . getMessage (), Toast . LENGTH_SHORT ). show (); break ; case FAILED : case CANCELLED : case TIMEOUT : Toast . makeText ( getContext (), result . getResponseMessage (), Toast . LENGTH_SHORT ). show (); break ; } } private void showCheckoutResult ( CardTransactionResponse successResponse ) { } @Override public void onViewCreated ( @NonNull View view , @Nullable Bundle savedInstanceState ) { super . onViewCreated ( view , savedInstanceState ); FragmentCheckoutBinding binding = FragmentCheckoutBinding . bind ( view ); binding . buttonCheckout . setOnClickListener ( v -> startCheckout ()); } private void startCheckout () { double checkoutAmount = 2.0 ; PaymentRequest request = new PaymentRequest . Builder () . setAmount ( checkoutAmount ) . setRequestType ( RequestType . PURCHASE ) . build (); cardPayment . launch ( request ); } }","title":"Step 4: Add code to start the payment flow and handle result"},{"location":"mpos/e-receipt/","text":"E-Receipt Your customer can receive an e-receipt in his email box when an email address is supplied. The following is an example of a payment request with customer information supplied for receiving of e-receipt. Kotlin val purchaseRequest = PaymentRequest { amount = 2.0 requestType = RequestType . PURCHASE customerInfo = CustomerInfo { email = \"customerEmail@gmail.com\" } } cardPayment . launch ( purchaseRequest ) Java CustomerInfo customerInfo = new CustomerInfo . Builder () . setEmail ( \"customerEmail@gmail.com\" ) . build (); PaymentRequest purchaseRequest = new PaymentRequest . Builder () . setAmount ( 2.0 ) . setRequestType ( RequestType . PURCHASE ) . setCustomerInfo ( customerInfo ) . build (); cardPayment . launch ( purchaseRequest );","title":"E-Receipt"},{"location":"mpos/e-receipt/#e-receipt","text":"Your customer can receive an e-receipt in his email box when an email address is supplied. The following is an example of a payment request with customer information supplied for receiving of e-receipt. Kotlin val purchaseRequest = PaymentRequest { amount = 2.0 requestType = RequestType . PURCHASE customerInfo = CustomerInfo { email = \"customerEmail@gmail.com\" } } cardPayment . launch ( purchaseRequest ) Java CustomerInfo customerInfo = new CustomerInfo . Builder () . setEmail ( \"customerEmail@gmail.com\" ) . build (); PaymentRequest purchaseRequest = new PaymentRequest . Builder () . setAmount ( 2.0 ) . setRequestType ( RequestType . PURCHASE ) . setCustomerInfo ( customerInfo ) . build (); cardPayment . launch ( purchaseRequest );","title":"E-Receipt"}]}